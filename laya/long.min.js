!function() {
    !function(t) {
        function i(t, i, r) {
            this.low = 0 | t, this.high = 0 | i, this.unsigned = !!r;
        }
        (window.dcodeIO = window.dcodeIO || {}).Long = i, i.isLong = function(t) {
            return !0 === (t && t instanceof i);
        };
        var r = {}, n = {};
        i.fromInt = function(t, e) {
            var o;
            if (e) {
                if (t >>>= 0, t >= 0 && 256 > t && (o = n[t])) return o;
                o = new i(t, 0 > (0 | t) ? -1 : 0, !0), t >= 0 && 256 > t && (n[t] = o);
            } else {
                if (t |= 0, t >= -128 && 128 > t && (o = r[t])) return o;
                o = new i(t, 0 > t ? -1 : 0, !1), t >= -128 && 128 > t && (r[t] = o);
            }
            return o;
        }, i.fromNumber = function(t, r) {
            return r = !!r, isNaN(t) || !isFinite(t) ? i.ZERO : !r && -o >= t ? i.MIN_VALUE : !r && t + 1 >= o ? i.MAX_VALUE : r && t >= e ? i.MAX_UNSIGNED_VALUE : 0 > t ? i.fromNumber(-t, r).negate() : new i(t % 4294967296 | 0, t / 4294967296 | 0, r);
        }, i.fromBits = function(t, r, n) {
            return new i(t, r, n);
        }, i.fromString = function(t, r, n) {
            if (0 === t.length) throw Error("number format error: empty string");
            if ("NaN" === t || "Infinity" === t || "+Infinity" === t || "-Infinity" === t) return i.ZERO;
            if ("number" == typeof r && (n = r, r = !1), n = n || 10, 2 > n || n > 36) throw Error("radix out of range: " + n);
            var e;
            if (0 < (e = t.indexOf("-"))) throw Error('number format error: interior "-" character: ' + t);
            if (0 === e) return i.fromString(t.substring(1), r, n).negate();
            e = i.fromNumber(Math.pow(n, 8));
            for (var o = i.ZERO, s = 0; s < t.length; s += 8) {
                var h = Math.min(8, t.length - s), u = parseInt(t.substring(s, s + h), n);
                8 > h ? (h = i.fromNumber(Math.pow(n, h)), o = o.multiply(h).add(i.fromNumber(u))) : (o = o.multiply(e), 
                o = o.add(i.fromNumber(u)));
            }
            return o.unsigned = r, o;
        }, i.fromValue = function(t) {
            return "number" == typeof t ? i.fromNumber(t) : "string" == typeof t ? i.fromString(t) : i.isLong(t) ? t : new i(t.low, t.high, t.unsigned);
        };
        var e = 0x10000000000000000, o = e / 2, s = i.fromInt(16777216);
        i.ZERO = i.fromInt(0), i.UZERO = i.fromInt(0, !0), i.ONE = i.fromInt(1), i.UONE = i.fromInt(1, !0), 
        i.NEG_ONE = i.fromInt(-1), i.MAX_VALUE = i.fromBits(-1, 2147483647, !1), i.MAX_UNSIGNED_VALUE = i.fromBits(-1, -1, !0), 
        i.MIN_VALUE = i.fromBits(0, -2147483648, !1), i.prototype.toInt = function() {
            return this.unsigned ? this.low >>> 0 : this.low;
        }, i.prototype.toNumber = function() {
            return this.unsigned ? 4294967296 * (this.high >>> 0) + (this.low >>> 0) : 4294967296 * this.high + (this.low >>> 0);
        }, i.prototype.toString = function(t) {
            if (t = t || 10, 2 > t || t > 36) throw RangeError("radix out of range: " + t);
            if (this.isZero()) return "0";
            var r;
            if (this.isNegative()) {
                if (this.equals(i.MIN_VALUE)) {
                    r = i.fromNumber(t);
                    var n = this.div(r);
                    return r = n.multiply(r).subtract(this), n.toString(t) + r.toInt().toString(t);
                }
                return "-" + this.negate().toString(t);
            }
            n = i.fromNumber(Math.pow(t, 6), this.unsigned), r = this;
            for (var e = ""; ;) {
                var o = r.div(n), s = (r.subtract(o.multiply(n)).toInt() >>> 0).toString(t);
                if (r = o, r.isZero()) return s + e;
                for (;6 > s.length; ) s = "0" + s;
                e = "" + s + e;
            }
        }, i.prototype.getHighBits = function() {
            return this.high;
        }, i.prototype.getHighBitsUnsigned = function() {
            return this.high >>> 0;
        }, i.prototype.getLowBits = function() {
            return this.low;
        }, i.prototype.getLowBitsUnsigned = function() {
            return this.low >>> 0;
        }, i.prototype.getNumBitsAbs = function() {
            if (this.isNegative()) return this.equals(i.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
            for (var t = 0 != this.high ? this.high : this.low, r = 31; r > 0 && 0 == (t & 1 << r); r--) ;
            return 0 != this.high ? r + 33 : r + 1;
        }, i.prototype.isZero = function() {
            return 0 === this.high && 0 === this.low;
        }, i.prototype.isNegative = function() {
            return !this.unsigned && 0 > this.high;
        }, i.prototype.isPositive = function() {
            return this.unsigned || 0 <= this.high;
        }, i.prototype.isOdd = function() {
            return 1 === (1 & this.low);
        }, i.prototype.isEven = function() {
            return 0 === (1 & this.low);
        }, i.prototype.equals = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), this.unsigned !== t.unsigned && 1 === this.high >>> 31 && 1 === t.high >>> 31 ? !1 : this.high === t.high && this.low === t.low;
        }, i.prototype.notEquals = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), !this.equals(t);
        }, i.prototype.lessThan = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), 0 > this.compare(t);
        }, i.prototype.lessThanOrEqual = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), 0 >= this.compare(t);
        }, i.prototype.greaterThan = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), 0 < this.compare(t);
        }, i.prototype.greaterThanOrEqual = function(t) {
            return 0 <= this.compare(t);
        }, i.prototype.compare = function(t) {
            if (this.equals(t)) return 0;
            var i = this.isNegative(), r = t.isNegative();
            return i && !r ? -1 : !i && r ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.subtract(t).isNegative() ? -1 : 1;
        }, i.prototype.negate = function() {
            return !this.unsigned && this.equals(i.MIN_VALUE) ? i.MIN_VALUE : this.not().add(i.ONE);
        }, i.prototype.add = function(t) {
            i.isLong(t) || (t = i.fromValue(t));
            var r, n = this.high >>> 16, e = 65535 & this.high, o = this.low >>> 16, s = t.high >>> 16, h = 65535 & t.high, u = t.low >>> 16;
            return r = 0 + ((65535 & this.low) + (65535 & t.low)), t = 0 + (r >>> 16), t += o + u, 
            o = 0 + (t >>> 16), o += e + h, e = 0 + (o >>> 16), e = e + (n + s) & 65535, i.fromBits((65535 & t) << 16 | 65535 & r, e << 16 | 65535 & o, this.unsigned);
        }, i.prototype.subtract = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), this.add(t.negate());
        }, i.prototype.multiply = function(t) {
            if (this.isZero()) return i.ZERO;
            if (i.isLong(t) || (t = i.fromValue(t)), t.isZero()) return i.ZERO;
            if (this.equals(i.MIN_VALUE)) return t.isOdd() ? i.MIN_VALUE : i.ZERO;
            if (t.equals(i.MIN_VALUE)) return this.isOdd() ? i.MIN_VALUE : i.ZERO;
            if (this.isNegative()) return t.isNegative() ? this.negate().multiply(t.negate()) : this.negate().multiply(t).negate();
            if (t.isNegative()) return this.multiply(t.negate()).negate();
            if (this.lessThan(s) && t.lessThan(s)) return i.fromNumber(this.toNumber() * t.toNumber(), this.unsigned);
            var r = this.high >>> 16, n = 65535 & this.high, e = this.low >>> 16, o = 65535 & this.low, h = t.high >>> 16, u = 65535 & t.high, g = t.low >>> 16;
            t = 65535 & t.low;
            var f, a, l, m;
            return m = 0 + o * t, l = 0 + (m >>> 16), l += e * t, a = 0 + (l >>> 16), l = (65535 & l) + o * g, 
            a += l >>> 16, l &= 65535, a += n * t, f = 0 + (a >>> 16), a = (65535 & a) + e * g, 
            f += a >>> 16, a &= 65535, a += o * u, f += a >>> 16, a &= 65535, f = f + (r * t + n * g + e * u + o * h) & 65535, 
            i.fromBits(l << 16 | 65535 & m, f << 16 | a, this.unsigned);
        }, i.prototype.div = function(t) {
            if (i.isLong(t) || (t = i.fromValue(t)), t.isZero()) throw Error("division by zero");
            if (this.isZero()) return this.unsigned ? i.UZERO : i.ZERO;
            var r, n, e;
            if (this.equals(i.MIN_VALUE)) return t.equals(i.ONE) || t.equals(i.NEG_ONE) ? i.MIN_VALUE : t.equals(i.MIN_VALUE) ? i.ONE : (r = this.shiftRight(1).div(t).shiftLeft(1), 
            r.equals(i.ZERO) ? t.isNegative() ? i.ONE : i.NEG_ONE : (n = this.subtract(t.multiply(r)), 
            e = r.add(n.div(t))));
            if (t.equals(i.MIN_VALUE)) return this.unsigned ? i.UZERO : i.ZERO;
            if (this.isNegative()) return t.isNegative() ? this.negate().div(t.negate()) : this.negate().div(t).negate();
            if (t.isNegative()) return this.div(t.negate()).negate();
            for (e = i.ZERO, n = this; n.greaterThanOrEqual(t); ) {
                r = Math.max(1, Math.floor(n.toNumber() / t.toNumber()));
                for (var o = Math.ceil(Math.log(r) / Math.LN2), o = 48 >= o ? 1 : Math.pow(2, o - 48), s = i.fromNumber(r), h = s.multiply(t); h.isNegative() || h.greaterThan(n); ) r -= o, 
                s = i.fromNumber(r, this.unsigned), h = s.multiply(t);
                s.isZero() && (s = i.ONE), e = e.add(s), n = n.subtract(h);
            }
            return e;
        }, i.prototype.modulo = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), this.subtract(this.div(t).multiply(t));
        }, i.prototype.not = function() {
            return i.fromBits(~this.low, ~this.high, this.unsigned);
        }, i.prototype.and = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), i.fromBits(this.low & t.low, this.high & t.high, this.unsigned);
        }, i.prototype.or = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), i.fromBits(this.low | t.low, this.high | t.high, this.unsigned);
        }, i.prototype.xor = function(t) {
            return i.isLong(t) || (t = i.fromValue(t)), i.fromBits(this.low ^ t.low, this.high ^ t.high, this.unsigned);
        }, i.prototype.shiftLeft = function(t) {
            return i.isLong(t) && (t = t.toInt()), 0 === (t &= 63) ? this : 32 > t ? i.fromBits(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : i.fromBits(0, this.low << t - 32, this.unsigned);
        }, i.prototype.shiftRight = function(t) {
            return i.isLong(t) && (t = t.toInt()), 0 === (t &= 63) ? this : 32 > t ? i.fromBits(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : i.fromBits(this.high >> t - 32, 0 <= this.high ? 0 : -1, this.unsigned);
        }, i.prototype.shiftRightUnsigned = function(t) {
            if (i.isLong(t) && (t = t.toInt()), t &= 63, 0 === t) return this;
            var r = this.high;
            return 32 > t ? i.fromBits(this.low >>> t | r << 32 - t, r >>> t, this.unsigned) : 32 === t ? i.fromBits(r, 0, this.unsigned) : i.fromBits(r >>> t - 32, 0, this.unsigned);
        }, i.prototype.toSigned = function() {
            return this.unsigned ? new i(this.low, this.high, !1) : this;
        }, i.prototype.toUnsigned = function() {
            return this.unsigned ? this : new i(this.low, this.high, !0);
        }, "function" == typeof require && "object" == typeof module && module && "object" == typeof exports && exports ? module.exports = i : "function" == typeof define && define.amd ? define(function() {
            return i;
        }) : (t.dcodeIO = t.dcodeIO || {}).Long = i;
    }(this);
}();